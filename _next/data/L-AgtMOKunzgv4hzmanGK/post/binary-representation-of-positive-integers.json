{"pageProps":{"frontmatter":{"title":"Binary Representation of Positive Intgers","description":"A tutorial on converting numbers from decimal to binary...and back!","date":"April 2, 2022"},"post":{"content":"\nIt's always fun to learn some additional tricks in math and computer science and I recently started reading about digital representation of numbers and [Swarthmore](https://www.swarthmore.edu/NatSci/echeeve1/Ref/BinaryMath/NumSys.html#:~:text=In%20summary%3A-,bit,numbers%20from%200%20to%20255.) has some truly great material on this. \n\nI was searching around the internet on how to progmatically convert decimal numbers to binary and I found there wasn't *that* great of a resource and stackoverflow had mixed stuff so I thought I'd put it something together quickly.\n\nI'll probably add to this tutorial later but I think the code is the most important part.\n\n# The basics\n\nIn short, we want to represent a decimal number (i.e., a number represented in base 10 via the 10 digits we use [0-9]), e.g., 86, as a binary number (i.e., a number represented in base 2 via the 2 digits we are then limited to [0 and 1]).\n\nAs outlined in the tutorial above, this results in the two representations:\n\n$$86_{10} = 1*64 + 0*32 + 1*16 + 0*8 + 1*4 + 1*2 + 0*1$$\n\nand \n\n$$86_{10} = 1*2^6 + 0*2^5 + 0*2^3 + 1*2^2 + 1*2^1 + 0*2^0$$\n\nWhich is equivalent to saying\n\n$$86_{10} = 1010110_2.$$\n\nThe subscript $2$ denotes a binary number. Each digit in a binary number is called a bit. The number 1010110 is represented by 7 bits. Any number can be broken down this way, by finding all of the powers of 2 that add up to the number in question (in this case 26, 24, 22 and 21).\n\nCool.\n\nSo how do we do this with a computer?\n\n# Binary Representation in Python\n\nAs we saw before, representing 86 in binary format requires us to deconstruct it from $2^n$, so with computers we can represent 86 by either recursively dividing by 2 (with some additional adjustment) or iteratively (via a while loop) doing pretty much the same thing. Here's the recursive version:\n\n```python\ndef decimalToBinary(n: int) -> str:\n    if n == 0:\n        return \"\"\n    else:\n        return decimalToBinary(n // 2) + str(n % 2)\n```\n\nThis is pretty simple and could be trivally mapped to a one-liner but for readability I'll say this is sufficient. Alternatively, we could solve this with a while loop using the following:\n\n```python\ndef decimalToBinary2(n: int) -> str:\n    bs = ''\n    while n > 0:\n        r = n / 2\n        n = n // 2\n        bs = str('1' if r % 1 > 0 else '0') + bs\n\n    return bs\n```\n\nAnd this is also pretty simple. It's worth noting that the str() function call is required before concatenating the binary string variable (i.e., bs) because without it python will actually fail to execute the if-else logic and you will not get the behavior you are looking for.\n\n# Decimal Representation from Binary in Python\n\nOkay, so how do we confirm this is behaving correctly? Obviously we can just recover it.\n\n\n```python\ndef binaryToDecimal(bs: str) -> int:\n    n, r = len(bs), 0\n    for i in range(n):\n        r+= int(bs[i]) * 2**(n - i - 1)\n    return r\n```\n\nAnd that's it! If you stare at this formula for a second you'll see it's just taking each bit in the string and multiplying the $i^{th}$ binary value by $2^{n-i-1}$.\n\nWe can verify that all of this works with some simple checks and comparisons: \n\n```python\ndecimalToBinary(86) == decimalToBinary2(86) # 1010110 == 1010110 --> true\nbinaryToDecimal(decimalToBinary2(86)) == 86 # true, converted 1010110 -> 86\n```\n\nHow cool is that?  I'll note that this is only accurate for positive integers but for the general case you can use the first digit to represent the sign of the numbers (with some handling for the 0 edge case).\n\nHope you found this interesting. As I said I'll elaborate more on this post eventually but I thought I mostly wanted to share the code as I didn't really see good examples providing this back and forth and it was something that helped me understand things more concretely.\n\nHappy typing!\n\n-Francisco\n","excerpt":""},"previousPost":{"slug":"a-fast-year-indeed","frontmatter":{"title":"A Fast Year Indeed","description":"365 days @ Fast","date":"March 4, 2022"},"excerpt":"","content":"\n> I don't know what's going on, and I'm probably not smart enough to understand if somebody was to explain it to me. All I know is we're being tested somehow, by somebody or some thing a whole lot smarter than us, and all I can do is be friendly and keep calm and try and have a nice time till it's over.\n\n-Kurt Vonnegut\n\nAs I reflect on hitting my first official year at Fast, I wanted to write about the two most important lessons I learned.\n\n## 1. Fast is better than perfect\n\nThere are many adages all referencing how striving for perfection interferes with progress and it's really true.\n\nI spent most of my career at large banks (even some of the \"innovative ones\") and the most dramatic difference between these two types of organizations is how much Faster startups are able to move. Others have writen before on how deep this runs in the DNA of startups and seeing it first hand is so exciting. Conversely, at established financial institutions, it's just not the case. The incentives aren't there and the bureacracy and over-processing of process creates too many roadblocks to actually get things done.\n\nOften my gripe at those organizations was that we spent more time on strategy, making presentations, meeting, than actualy doing the work. I'm very supportive of being thoughtful and planning your work, but I think something about big organizations creates an incentive to spend more time talking about the work than actually doing the work.\n\nThat always frustrated me, again, not because I'm against planning or process but rather I'm against process that interferes with progress, which I think is in place at those organizations more than people want to admit.\n\nSo why does that happen? Why do people create processes that interfere with progress?\n\nBecause it *feels* like it matters. But what *feels* good and what actually matters aren't necessarily the same thing and I think big organizations simply lose sight of this fact.\n\nWhich leads me to the other important lesson I learned...\n\n## 2. Focus on what *really* matters\n\nTime is a finite, precious commodity.\n\nIt's a commodity that can't be bought back so I often reflect on what time was wasted \"feeling good\" and what time actually resulted in change. As I get older, this becomes increasingly more important to me and I only recently realized how much time I've wasted trying to feel good rather than trying to do things that mattered, so I'm trying to course correct these days.\n\nAt Fast, I have been so happy with how focused we are on doing work that actually matters. Meetings and work streams are always grounded in action items and next steps, which just makes it all feel like we are working together. And, in truth, that just makes the whole thing fun.\n\nWe are all commonly bound by finite time and I feel lucky to get to choose where I spend it. I am grateful to have spent the last year with Fast builders--brilliant, kind, and talented people who focus on what matters.\n\n-Francisco\n"},"nextPost":null},"__N_SSG":true}