{"pageProps":{"frontmatter":{"title":"How to use Docker to Launch a Jupyter Notebook","description":"A Data Scientists Guide to using Docker containers to quickly spin up a Jupyter Notebook","date":"February 13, 2021"},"post":{"content":"\n*TL;DR: A Data Science Tutorial on the benefits of Docker.*\n\n## Some History\nI began my foray into what's now called [Data Science](https://en.wikipedia.org/wiki/Data_science) back in 2011. I was doing my first master's in economics and statistics and I was doing econometrics research on consumer demand based on survey data using [SAS](https://www.sas.com/en_us/company-information.htmlhttps://www.sas.com/en_us/company-information/profile.html).\n\n![Look at that rise!](data-science-google-trends.png)\n<p align=\"center\" style=\"padding:0\"><i>Looks like I graduated at an interesting time.</i></p>\n\nTechnology was *much* different then, distributed computing and Open Source Software (OSS) was only starting to get the popularity and attention it has now. More practically, most businesses weren't using cloud services, they were using their own servers for storing and managing their data (i.e., real physical machines) with fixed RAM and a lot of overhead (read: chaos when the power goes out).\n\nThe most sophisticated analytical shops used SAS* to process their data since it was a very efficient way to analyze large data out of memory.\n\nBut it wasn't fault tolerant or stable. Software libraries for different mathematical frameworks have evolved so much over time and they just kept changing, so the infrastructure kept changing, too.\n\nIn short, the way data scientists did analytics was pretty brittle: most places didn't use version control or servers; code was sent via emails; and deploying models was usually done in an Oracle/MySQL table that ran a query, joins, and a sum-product. It was the Wild West.\n\nCloud computing and OSS changed the game. [R](https://cran.r-project.org), [Python](https://www.python.org), [Hadoop](https://hadoop.apache.org), [Spark](https://spark.apache.org), [CUDA](https://developer.nvidia.com/cuda-toolkit), and other frameworks completely influenced how we thought about that infrastructure.\n\nPython, in particular, has been one of the greatest contributions to data science and it has truly helped push the field further.\n\n## Python, the Beautiful\n\nPython wasn't the original data science language, R and SAS were much more popular back in the early and mid-2010s but two popular data mining libraries helped Python skyrocket in the data science community ([sklearn](https://scikit-learn.org/stable/) and [xgboost](https://en.wikipedia.org/wiki/XGBoost)). Then in 2015 people made advances in deep learning frameworks (moving away from [Theano](https://en.wikipedia.org/wiki/Theano_(software))) and creating things like [Caffe](https://caffe.berkeleyvision.org), [Keras](https://en.wikipedia.org/wiki/Keras), [Tensorflow](https://en.wikipedia.org/wiki/TensorFlow), and eventually [PyTorch](https://en.wikipedia.org/wiki/PyTorch) (my personal favorite).\n\nAll of the stuff under the hood changed dramatically and it made the infrastructure around deploying these models change dramatically, too.\n\nThe ever-evolving software made getting data science infrastructure up and running really annoying, time consuming, and eventually kind of wasteful because it would get stale quickly, but the world has evolved again.\n\nCue [Docker](https://en.wikipedia.org/wiki/Docker_(software)) and the emergence of [containerization](https://hackernoon.com/what-is-containerization-83ae53a709a6).\n\n## Docker and Jupyter Notebooks\n\nDocker is basically a way to easily configure a mini-computer in your computer. The idea being, that if you configure it with a single file declaring what stuff (i.e., software) you need in it, you can deploy that same container to some production environment. In real, customer-facing applications even a small subversion change of a single library can break your entire service.\n\nDocker can help mitigate that risk.\n\n![It works on my machine!](docker.jpg)\n<p align=\"center\" style=\"padding:0\"><i>This meme is suprisingly accurate.</i></p>\n\nWhat's interesting is that people have made attempts at doing similar things for a long time ([virtual environments](https://virtualenv.pypa.io/en/latest/), [Pyenv](https://github.com/pyenv/pyenv), [virtual box](https://www.virtualbox.org), etc.) and while most of them were helpful, they all still had really annoying issues come up constantly...but Docker is much more comprehensive.\n\nSo how is that relevant for Python and data scientists? Well, if you're doing data science work, odds are you're probably using Python or R and you might be doing that work using a [Jupyter Notebook](https://jupyter.org). \n\nThe [Jupyter Project](https://jupyter.org/about) has created a wonderful [Data Science](https://hub.docker.com/r/jupyter/datascience-notebook/) docker image that allows you to trivially get up and running.\n\nAll you have to do is [install Docker](https://docs.docker.com/engine/install/) and run the following in your terminal:\n\n```bash\ndocker run -it -p 8888:8888 -v /your/folder/:/home/jovyan/work --rm --name jupyter jupyter/datascience-notebook\n```\nYou'll see some output and at the end of it you should see something like: \n\n```\n[C 2021-02-14 14:37:06.596 ServerApp] \n    \n    To access the server, open this file in a browser:\n        file:///home/jovyan/.local/share/jupyter/runtime/jpserver-6-open.html\n    Or copy and paste one of these URLs:\n        http://7c94e4cf2dc1:8888/lab?token=this-will-be-a-magical-token\n     or http://127.0.0.1:8888/lab?token=this-will-be-a-magical-token\n```\nClick on that link in your terminal and you should be directed to a page that looks like the image below:\n\n![So many options!](docker-for-data-science.png)\n<p align=\"center\" style=\"padding:0\"><i>Who is using Julia these days?</i></p>\n\nAnd there you have it, you can start ripping through all sorts of data in minutes!\n\nA great benefit of this particular docker image is that it has most of the Python/R libraries you want already out of the box but if you want to add another, you can do that right in your notebook by using [Jupyter Magic](https://ipython.readthedocs.io/en/stable/interactive/magics.html) in a cell like so:\n```bash\n%pip install snowflake\n```\n\n![Simple install](pip_install.png)\n<p align=\"center\" style=\"padding:0\"><i>Wow, that was easy.</i></p>\n\nAnd now you can use that library. See how nice it is not to have to [dual boot](https://en.wikipedia.org/wiki/Multi-booting) your computer to install something?\n\n## Conclusion\n\nData science infrastructure is going to continue to evolve very heavily, so I imagine this post will be outdated in 2 years but currently this is an extremely fast and painless way to get up and running.\n\nI can't emphasize enough how miserable managing different Operating System (OS), Python, or other software library versions really is. Debugging these things used to take days or weeks and now it's just trivial, so I'd really recommend this approach. An added benefit is that this will also save you an extraordinary amount of time when you go to deploy your model...but more on that later. ðŸ˜‰\n\n*Have some feedback? Feel free to [let me know](https://twitter.com/franciscojarceo)!*\n\n---\n*As a brief side note, the history of SAS is amazing and I really recommend reading the [Wikipedia page](https://en.wikipedia.org/wiki/SAS_Institute) on it. Most of the large banks, pharmaceutical firms, several government agencies, research institutions, and other major organizations in the world still operate on SAS because it's so deeply embedded into their business. Now, that technology can no longer be decoupled from their core infrastructure, which is interesting.*","excerpt":""},"previousPost":{"slug":"customer-segmentation-data-science","frontmatter":{"title":"Customer Segmentation using Data Science","description":"A Data Scientists Guide to Segmenting your Customers using clustering algorithms and decision trees.","date":"February 6, 2021"},"excerpt":"","content":"\n*TL;DR: A Data Science Tutorial on using K-Means and Decision Trees together.*\n\nCustomer segmentation (sometimes called [Market Segmentation](https://en.wikipedia.org/wiki/Market_segmentation)) is ubiqutous in the private sector. We think about bucketing people into $k$ mutually exclusive and collectively exhausting (MECE) groups. The premise being that instead of having 1 strategy for delivering a product or experience, providing $k$ experiences or strategies will yield much better engagement or acquisition from our customers.\n\nGenerally speaking, this makes sense; it's intuitive. Provide people a more curated experience and they will enjoy it more...and the more personalized the better. \n\nNetflix, Spotify, YouTube, Twiter, Instagram, and all of the big tech companies have mastered personalization by using robust, computationally expensive, and sophisticated machine learning pipelines. But the world has been doing this for a long time, just a much less sophisticated version.\n\nSo I thought I'd give a technical demo of what customer segmentation looks like in a basic way using a trick I've used for years.\n\nHere are the things I'd like to cover during this demo:\n\n1. What options do I have to segment my customers?\n2. How do I actually do the segmentation?\n3. What can I do with my new customer segments?\n4. How do I know that my segments are effective?\n5. How do I know when my segments have changed?\n\n## Approaches to Customer Segmentation\n\nThe phrase \"Customer Segments\" tends to mean different things across different industries, organizations, and even across business functions (e.g., marketing, risk, product, etc.). \n\nAs an example, for a consumer products retailer, they may refer to customer segments using both demographic information or their purchase behavior, where a lender may refer to their segments based on credit score bands. While very meaningfully different from a business perspective, the same algorithms can be used for both problems.\n\nAnalytically speaking, I've seen Customer Segments defined really in two main ways: (1) Business Segments and (2) Algorithmic Segments. Usually executives refer to their segments in the first category and data scientists focus on the second. The first is really important organizationally because 99% of the people working with your customers don't care about how you bucketed them and customers are the most important thing. Always.\n\n...but how do you *actually* (i.e., in code and data) get to those segments?\n\n### 1. Logical Business Segments\nThese segments tend to be defined by heuristics and things that make common sense. They are often built on things that are aligned with the goal of the business.\n\nHere are some examples:\n\n- The age of the customer (in years)\n- The income of the customer (in dollars or thousands of dollars)\n- The amount of money a customer spent in the last year\n- The likelihood a customer will spend money at a given store (purchase propensity / propensity to buy)\n- The customer's geographic region (e.g., zipcode, state)\n\nIn data, some of that customer information would look something like this:\n\n<table>\n  <tr>\n    <th>User ID</th>\n    <th>Age</th>\n    <th>Customer Income</th>\n    <th>Purchase Propensity</th>\n    <th>...</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>25</td>\n    <td>$45,000</td>\n    <td>0.9</td>\n    <td>...</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>30</td>\n    <td>$80,000</td>\n    <td>0.4</td>\n    <td>...</td>\n  </tr>\n  <tr>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n  <tr>\n    <td>n</td>\n    <td>56</td>\n    <td>$57,000</td>\n    <td>0.1</td>\n    <td>...</td>\n  </tr>\n</table>\nAnd so on.\n\nWe could apply some logic/rules/code to create segment like:\n\n- Age Buckets\n    1. < 25\n    2. 25-35\n    3. 35-55\n    4. 55+\n- Income Buckets\n    1. < $25K\n    2. $25K-50K\n    3. $50K-100K\n    4. $100-150K\n    5. $150K+\n- Propensity Buckets\n    1. Low: [0, 0.25]\n    2. Medium: [0.25, 0.75]\n    3. High: [0.75, 1.0]\n\nAnd map that logic into our data, which would yield\n<table>\n  <tr>\n    <th>User ID</th>\n    <th>Age Bucket</th>\n    <th>Income Bucket</th>\n    <th>Propensity Bucket</th>\n    <th>...</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>25-35</td>\n    <td>$25K-50K</td>\n    <td>High</td>\n    <td>...</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>25-35</td>\n    <td>$50K-100K</td>\n    <td>Medium</td>\n    <td>...</td>\n  </tr>\n  <tr>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n  <tr>\n    <td>n</td>\n    <td>56</td>\n    <td>$50K-100K</td>\n    <td>Low</td>\n    <td>...</td>\n  </tr>\n</table>\nAnd so on.\n\nPretty simple, right? The code for this categorization is simple too (assuming you're using Pandas and Python; though it's also simple in SQL).\n\n```python\n# Here's one example\nimport numpy as np\nimport pandas as pd\n\ncdf['Income Bucket'] = pd.cut(cdf['Annual Income ($K)'], \n    bins=[0, 25, 35, 55, np.inf], \n    labels=['<25', '25-35', '35-55', '55+']\n)\n```\nThis is a really helpful and simple way to understand our customers and it's the way that most businesses do analytics, but we can do more. ðŸ˜Š\n\n### 2. Algorithmic Segments\n\nSegments defined using simple business logic are great because they are so easy to interpret, but that's not free.\nBy favoring simplicity we have to limit ourselves to (potentially) suboptimal segments. \nThis is typically on purpose and entirely fine but, again, we can do better.\n\nSo how do we do better?\n\nCue statistics, data mining, analytics, machine learning, or whatever it's called this week. More specifically, we can use the classic [K-Means Clustering](https://en.wikipedia.org/wiki/K-means_clustering) algorithm to *learn* an optimal set of segments given some set of data.\n\nTo skip over many important details ([more here](https://towardsdatascience.com/customer-segmentation-using-k-means-clustering-d33964f238c3)), K-Means is an algorithm that optimally buckets your data into $K$ groups (according to a specific mathematical function called the [euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance)). It's a classic approach and tends to work quiet well in practice (there are a ton of other neat [clustering algorithms](https://en.wikipedia.org/wiki/Cluster_analysis#Algorithms)) but one non-technical challenge is (1) choosing $K$ and (2) explaining what a single cluster actually means to literally anyone else.\n\nSolving (1) is relatively straight-forward. You can run K-means for some number of $K$ from [0, $m$] ($m > 0$ and choose what appears to be a $k$ that sufficiently minimizes the within-cluster sum-of-squares (i.e., $\\sum_{i=0}^{n} min_{\\mu_j \\in C}||x_i - \\mu_j||^2$). Here notice that the the majority of the variation of the clusters can be capture by $k=6$.\n\n![The Inertia Function!](inertia.png)\n<p align=\"center\" style=\"padding:0\"><i>Inertia as a function of k</i></p>\n\nNow to (2), which is the harder challenge. If I were to plot my data and look at the clusters, I'd have something that looks like:\n\n![K-Means!](kmeans.png)\n<p align=\"center\" style=\"padding:0\"><i>Look at all 3 of those beautiful dimensions!</i></p>\n\nHow cool, right? This little algorithm learned pretty clear groups that you can see rather obviously in the data. Impressive! And also useless to your boss and colleagues.\n\nMore seriously, while you can see these clusters, you can't actually extract a clear description from it, which makes interpreting it really, really hard when you go past 3 dimensions.\n\nSo what can you do to make this slightly more meaningful?\n\nEnter [decision trees](https://en.wikipedia.org/wiki/Decision_tree). Another elegant, classic, and amazing algorithm. Decision Trees basically split up your data using simple `if-else` statements. So, a trick that you can use is to take the predicted clusters and run a Decision Tree (Classification) to predict the segment and use the learneed Tree's logic as your new business logic.\n\nI find this little trick pretty fun and effective since I can more easily describe how a machine learned a segment and I can also inspect it. Let's suppose I ran my tree on this learned K-means, what would the output look like?\n\n![Decision Tree Ouput!](decisiontree.png)\n<p align=\"center\" style=\"padding:0\"><i>Is this really more interpretable?</i></p>\n\nThere you have it, now you have a segmentation that is closer to optimal and somewhat easier to interpret. It's still not as good as the business definition but you could actually read through this and eventually come up with a heuristic driven approach as well, which is why I like it and why I've used it in the past.\n\nAnd here's the code to run the K-means and the Decision tree.\n\n```python\nimport pydotplus\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn.externals.six import StringIO  \n\noptimal_clusters = 6\n# 6 clusters 6 colors\nxcolors = ['red', 'green', 'blue', 'orange', 'purple', 'gray']\n# Chose 6 as the best number of clusters\nkmeans_model = (KMeans(n_clusters = optimal_clusters,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nkmeans_model.fit(X1)\ncdf['pred_cluster_kmeans'] = kmeans_model.labels_\ncentroids = kmeans_model.cluster_centers_\n\ndisplay(pd.DataFrame(cdf['pred_cluster_kmeans'].value_counts(normalize=True)))\n\nclf = DecisionTreeClassifier()\n# Train Decision Tree Classifer\nclf = clf.fit(X1, cdf['pred_cluster_kmeans'])\n\n# Predict the response for test dataset\ncdf['pred_class_dtree'] = clf.predict(X1)\n\ndisplay(pd.crosstab(cdf['pred_cluster_kmeans'], cdf['pred_class_dtree']))\ndot_data = StringIO()\nexport_graphviz(\n    decision_tree=clf, \n    out_file=dot_data,  \n    filled=True, \n    rounded=False,\n    impurity=False,\n    special_characters=True, \n    feature_names=xcol_labels, \n    class_names=cdf['pred_cluster_kmeans'].unique().astype(str).tolist(),\n\n)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png(\"./decisiontree.png\")\n```\n## What can you do with your new segments?\n\nNow that we have our customer segments we can do all sorts of different things.\nWe can create [A/B tests](https://www.optimizely.com/optimization-glossary/ab-testing/) for website experiences or we can test the impact of [changing our prices](https://medium.com/@judaikawa/price-elasticity-statistical-modeling-in-the-retail-industry-a-quick-overview-fdab5350222) to certain customers.\nIn general, we can just try a bunch of new stuff.\n\n## How do I know if my segments are accurate?\n\nThe metric we used in the example above (i.e., within cluster sum-of-squares / inertia) was a reasonably straightforward way to measure the accuracy of your segments from an analytical perspective, but if you wanted to take a closer look, I'd recommend reviewing individual users in each segment. It sounds a little silly and can, in some cases, lead to the wrong conclusions but I firmly believe that in data science, you just have to really **look** at your data. You learn a lot from it.\n\n## How do I know when my segments need to change?\n\nLastly, segments can change; your customers are always evolving so it's good to re-evaluate your clusters time and again. The emergence of new segments should feel very obvious, since it may be driven by product or acquisition changes. As a concrete example, if you noticed that important businesss metrics split by your segments are starting to behave a little differently, then you can investigate whether it's driven by a change in the segments; sometimes it is, sometimes it's not.\n\n\n## Conclusion\nThis tutorial ended up being a little longer than I anticipated but oh well, I hope you enjoyed it.\n\nI've stored the code to reproduce this example in a [Jupyter Notebook](https://github.com/franciscojavierarceo/Python/blob/master/demos/Customer%20Segmentation%20Example.ipynb) available on my GitHub (note to render the interactive 3D visualization you have to run the notebook). To get it up and running you only need to download the notebook, [download the data](https://www.kaggle.com/vjchoudhary7/customer-segmentation-tutorial-in-python), install [Docker](https://www.docker.com/get-started), and simply run:\n\n```bash\ndocker run -it -p 8888:8888 -v ~/path/to/your/folder/:/home/jovyan/work --rm --name jupyter jupyter/scipy-notebook:17aba6048f44\n```\n\nAnd you should be good to go. Happy segmenting!\n\n*Have some feedback? Feel free to [let me know](https://twitter.com/franciscojarceo)!*"},"nextPost":null},"__N_SSG":true}