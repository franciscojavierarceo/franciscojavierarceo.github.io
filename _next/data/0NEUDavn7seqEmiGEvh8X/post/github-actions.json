{"pageProps":{"frontmatter":{"title":"Deploying a Next.js Site using Github Actions","description":"GitHub Actions to Deploy a Static Site built with Next.js","date":"January 3, 2021"},"post":{"content":"\nI'm a huge fan of [GitHub Actions](https://github.com/features/actions). They're so simple but so effective at doing such a broad range of things. In short, you can tell GitHub do something on a computer everytime you push to your repository (or to a branch on a specific repository like the `main` branch).\n\nFor today's post, I'll focus on how I used an action to automate deploying my static site built with Next.js to [GitHub Pages](https://pages.github.com).\n\nI made this blog on a repository hosted on GitHub and added a GirHub Action to compile the JavaScript/React code into static HTML files. This really didn't require all that much effort.\n\n\nHere's what I had to do:\n\n1. Build a Next.js blog following the [detailed tutorial](https://nextjs.org/learn/basics/create-nextjs-app) and store the code on a GitHub repository\n2. Create a workflow file in the repository with the following path: [`./github/workflows/integrate.yml`](https://github.com/franciscojavierarceo/franciscojavierarceo.github.io/blob/main/.github/workflows/integrate.yml)\n3. Specify that workflow file to export the static files whenever I push to `main` and *commit* the exported files to a separate branch called `gh-pages` (you can just follow the workflow file I used)\n4. Manually add a `.nojekyll` file to the `gh-pages` branch (this is to resolve [this bug](https://github.com/vercel/next.js/issues/2029))\n5. Configure my repository Settings so that it sources the GitHub Pages build from the `gh-pages` branch\n\nAnd that's it, adding new blog posts is as simple as creating a new [markdown](https://www.markdownguide.org/) file and pushing to the `main` branch. The GitHub Action will handle all of the rest!\n\nThis is much nicer in behavior than my old site, which was built using Jekyll (a Ruby framework) and it's much less work than building a full application with Django to get high quality page loads. I’d add that I’m a huge fan of Django but I think for a static, fast, and lightweight site, Next.js my new go to!","excerpt":""},"previousPost":{"slug":"next-js-blog","frontmatter":{"title":"Learning Next.js","description":"Learning the Next JavaScript Framework","date":"January 2, 2021"},"excerpt":"","content":"\nIn the spirit of my last blog post talking about learning new things, I decided to learn <a href=\"https://nextjs.org/\">Next.JS</a>, which is a JavaScript framework built on top of <a href=\"https://reactjs.org/\">React</a> for web development. One of the main reasons I was particularly interested in Next.JS was because of it's opinionated optimizations.\n\nIn my last post I mentioned that I spent a lot of time learning about the technical details of Search Engine Optimization (SEO) and trying to optimize my Django application for that. I was ultimately reasonably successful in it but much of the logic to do so was tedious to author and rather unpleasant, which is why I'm excited about Next.JS, since it automates much of this for you right out of the box.\n\nTo learn it, I built this blog using their <a href=\"https://nextjs.org/learn/basics/create-nextjs-app\">tutorial</a>, which I highly recommend!\n\nMy goal is to move <a href=\"https://www.unidosfin.com/en\">Unidos</a> to Next.JS for the front-end and keep the Django back-end, much of which I've already converted to APIs."},"nextPost":{"slug":"i-love-code","frontmatter":{"title":"I love Code","description":"Some thoughts on the elegance of code.","date":"January 6, 2021"},"excerpt":"","content":"\nI love code. Plain and simple.\n\nI didn't always though. I started programming at 21 years old during my first masters---I was studying statistics and used code only as a means for running regression models and doing microeconometrics research. I started statistical programming back in 2011 using [STATA](https://www.stata.com/) and [SAS](https://www.sas.com/). They weren't *real* programming languages by a computer scientist's standards but that is technically how I started.\n\nI eventually moved onto to learning [SQL](https://en.wikipedia.org/wiki/SQL) and [R](https://www.r-project.org/about.html) when I started working and I found myself often writing Monte Carlo simulations of harmonic regressions, two stage least-squares, and other machine learning/statistical phenomenon.\n\nAnd that's how it started. I began learning [Python](https://www.python.org/) more actively at work and it mostly increased from there. During my second masters I started learning [Lua](http://www.lua.org/) in order to use [Torch](http://torch.ch/), which was used by [facebook AI](https://ai.facebook.com/) before [PyTorch](https://pytorch.org/) was developed. Then at Goldman I had to learn proprietary tools like Slang. Now I've spent the last year learning much more about [JavaScript](https://www.javascript.com/) and web development in general, and I just couldn't help but reflect and think about how much I actually *enjoy* it.\n\nIt's 2021 now and it's officially beeen a 10 year journey learning how to code (although what can only be argued as chaotically and poorly across different disciplines). Back when I first started I had no idea how anything in a computer worked and I was really, really bad at it. \n\nIt was miserable and I always felt deeply insecure about my code. I feel lucky now that I'm no longer code-shy and I don't struggle as much as I used to. That's not to say I don't have typos or bugs (I do!) but it's more to say that it's much easier these days for me to read through and understand how things are working and how to debug.\n\nBut that took me 10 years and it was a literal headache for most of the time. I'm curious to see what I'll feel in 10 years and what else I'll have learned.\n\nAll that just to show this beautiful piece of code, which is *a* way to write a function which takes as input *n* and yields its [Fibonacci Number](https://en.wikipedia.org/wiki/Fibonacci_number).\n\n```python\ndef f(n: int) -> int:\n    assert n>0, 'n > 0'\n    if n < 3:\n        return {1:0, 2:1}[n]\n    return f(n-1) + f(n-2)\n```\n\nThis code is both brief *and* elegant. That's what I love about it. In 5 little lines so much of human collaboration and information is represented. To think that 5 little lines could do all of that is astounding to me, I genuinely find it beauitful. I guess that's because I just love code."}},"__N_SSG":true}